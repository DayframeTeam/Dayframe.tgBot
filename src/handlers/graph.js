import axios from 'axios';
import { sendAnimatedDots } from '../utils/botHelpers.js';
import 'dotenv/config';

export default async function graphHandler(ctx) {
  // –ó–∞–ø—É—Å–∫–∞–µ–º dots –∏ –ø–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  const removeDots = await sendAnimatedDots(ctx, 300);

  // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞–±–æ—Ç—É
  const resultText = await fetchGraphAndFormat(ctx);

  // –£–¥–∞–ª—è–µ–º dots —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  await removeDots();

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  await ctx.reply(resultText, { parse_mode: 'Markdown' });
}

async function fetchGraphAndFormat(ctx) {
  try {
    // –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ 100 —Å–∞–º—ã—Ö ¬´–±–ª–∏–∑–∫–∏—Ö¬ª –∫ –ø—É—Å—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    const { data } = await axios.get(
      `${process.env.INDEXER_URL}/search_text`,
      {
        params: {
          chat_id: String(ctx.from.id),
          text: '',
          top_k: 100,
        },
      },
    );
    // –¥–æ–ø—É—Å—Ç–∏–º, –≤–∞—à API –æ—Ç–¥–∞–µ—Ç { matches: [ { id, text, score }, ‚Ä¶ ] }
    const matches = data.matches || data; // –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –º–∞—Å—Å–∏–≤

    if (!Array.isArray(matches) || matches.length === 0) {
      return '‚ö†Ô∏è –í –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ë–î –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.';
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    const lines = matches.map((item, idx) => {
      const txt = item.text ?? item.metadata?.text ?? `<no-text>`;
      const id = item.id;
      const score =
        item.score != null ? ` (score ${item.score.toFixed(4)})` : '';
      return `${idx + 1}. [${id}] ${txt}${score}`;
    });

    // –ï—Å–ª–∏ –º–Ω–æ–≥–æ ‚Äî –º–æ–∂–Ω–æ —Ä–∞–∑–æ–±–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π,
    // –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∑–¥–µ—Å—å –æ–¥–Ω–æ
    return ['üï∏Ô∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–µ–π vector-–ë–î:', ...lines].join('\n');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ fetch /search_text:', err);
    return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î.';
  }
}
